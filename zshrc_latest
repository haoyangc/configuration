# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="/Users/yang/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
#ZSH_THEME="robbyrussell"
ZSH_THEME="ys"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
export PATH=/usr/local/bin:$PATH

alias run-server-newwindow='/Users/yang/Library/ApplicationSupport/Steam/steamapps/common/Starbound/osx/run-server.sh'
alias run-server='cd /Users/yang/Library/ApplicationSupport/Steam/steamapps/common/Starbound/osx; ./starbound_server'

git() {
  if [[ $@ == "branch" ]]; then
    command git branch -vv
  elif [[ $@ == "lg" ]]; then
    command git log --graph --oneline --decorate --all
  else
    command git "$@"
  fi
}

alias pip=/usr/local/bin/pip3

PATH=$HOME/Library/Python/3.9/bin:$PATH

# vi mode in ZSH
#bindkey -v
# set -o vi
#
#######################################################
# Command line cheat-sheet
#######################################################
# ^A -> to first of the line
# ^E -> to end of the line


########################################################
# Python virtual environment
# Option1: use venv (virtualenv) and pip
########################################################
# 1. create venv in a certain path (once per env)
# python3 -m venv /path/to/venv
# 2. activate
# source /path/to/venv/bin/activate
# 3. (Opt) update pip
# pip install --upgrade pip
# 4. Install packages through pip
# pip install <package_name>
# 5. Generate 'requirements.txt' for declaring dependency versions
# pip freeze > requirements.txt
# 6. Install all dependencies from a 'requirements.txt' file
# pip install -r requirements.txt
# 7. deactivate
# deactivate
########################################################
# Python virtual environment
# Option2: use pipenv
# pros:
# 1. one tool (pipenv) instead of two (pip & virtualenv)
# 2. dependency graph view: pipenv graph
# 3. work with both requirements.txt and Pipfile
########################################################
# 1. Install pipenv
# brew install pipenv
# (or if you have pip as system-wide package: pip install --user pipenv)
# 2. create a project directory as environment root and cd into it
# mkdir proj; cd proj
# 3. install packages with pipenv (instead of pip)
# in prod: pipenv install <package>
# or pipenv install requests==2.13.0
# in dev: pipenv install <package> --dev
#
# 4-1. To activate or deactivate this project's virtualenv, run
# to enter (in pipenv root): pipenv shell
# to leave : exit (or ^D (end of file))
#
# note: deactivate won't work
# 4-2. Alternatively, run a command inside the virtualenv with
# to run command: pipenv run <your command>
# for example: pipenv run python /path/to/script.py
# 5. Install dependencies
# in prod: pipenv install
# in dev: pipenv install --dev
# 6. Lock currently installed packages
# pipenv lock
# 
# Others:
# a. get virtualenvs location
# pipenv --venv
# b. dependency graph view
# pipenv graph
# c. list dependencies
# pipenv list
# d. generate requiremetns.txt
# pipenv lock -r > requirements.txt
# c. check security vulnerabilities
# pipenv check
#
#
########################################################

alias pipenv-shell='pipenv shell'
alias pipenv-shell-leave='exit'

########################################################
# MySQL
########################################################
alias mysql-start='mysql.server start'
alias mysql-stop='mysql.server stop'
alias mysql-daemon-start='brew services start mysql'
alias mysql-daemon-stop='brew service stop mysql'
alias mysql-login='mysql -u root -p'

########################################################
# Regex Cheetsheet
########################################################
# 
# ### Character classes
# .	any character except newline
# \w\d\s	word, digit, whitespace
# \W\D\S	not word, digit, whitespace
# [abc]	any of a, b, or c
# [^abc]	not a, b, or c
# [a-g]	character between a & g
#
# ### Anchors
# ^abc$	start / end of the string
# \b\B	word, not-word boundary
#
# ### Escaped characters
# \.\*\\	escaped special characters
# \t\n\r	tab, linefeed, carriage return
#
# ### Groups & Lookaround
# (abc)	capture group
# \1	backreference to group #1
# (?:abc)	non-capturing group
# (?=abc)	positive lookahead
# (?!abc)	negative lookahead
#
# ### Quantifiers & Alternation
# a*a+a?	0 or more, 1 or more, 0 or 1
# a{5}a{2,}	exactly five, two or more
# a{1,3}	between one & three
# a+?a{2,}?	match as few as possible
# ab|cd	match ab or cd
########################################################


alias SSH_REMOTE='ssh haoyangc@127.0.0.1 -p 2022' # some cloud vm or local vm running in linux (Debian64)


########################################################
# Flask
########################################################
export FLASK_APP=hello.py
export FLASK_ENV=development
########################################################
#
########################################################
# Git
########################################################
# 1. Add Remote
# https://docs.github.com/en/free-pro-team@latest/github/using-git/adding-a-remote
# git remote add origin https://github.com/user/repo.git
#
# 2. Set a remote branch <branchname> as upstream
# git branch -u origin/main (assume <branchname>==main)
#
# git rebase origin/main -i
#
# git push origin HEAD main

########################################################
#





